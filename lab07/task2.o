     1                                  %include 'in_out.asm' ; подключение внешнего файла
     1                              <1> nextchar:                   
     2 00000000 803800              <1>     cmp     byte [eax], 0   
     3 00000003 7406                <1>     jz      finished        
     4 00000005 40                  <1>     inc     eax             
     5 00000006 EBF8                <1>     jmp     nextchar     
     6                              <1> slenn:                     
     7 00000008 53                  <1>     push    ebx             
     8 00000009 89C3                <1>     mov     ebx, eax        
     9                              <1>        
    10                              <1>     
    11                              <1> finished:
    12 0000000B 29D8                <1>     sub     eax, ebx
    13 0000000D 5B                  <1>     pop     ebx             
    14 0000000E C3                  <1>     ret                     
    15                              <1> 
    16                              <1> 
    17                              <1> ;---------------  sprint  -------------------
    18                              <1> ; Функция печати сообщения
    19                              <1> ; входные данные: mov eax,<message>
    20                              <1> sprint:
    21 0000000F 52                  <1>     push    edx
    22 00000010 51                  <1>     push    ecx
    23 00000011 53                  <1>     push    ebx
    24 00000012 50                  <1>     push    eax
    25 00000013 E8F0FFFFFF          <1>     call    slenn
    26                              <1>     
    27 00000018 89C2                <1>     mov     edx, eax
    28 0000001A 58                  <1>     pop     eax
    29                              <1>     
    30 0000001B 89C1                <1>     mov     ecx, eax
    31 0000001D BB01000000          <1>     mov     ebx, 1
    32 00000022 B804000000          <1>     mov     eax, 4
    33 00000027 CD80                <1>     int     80h
    34                              <1> 
    35 00000029 5B                  <1>     pop     ebx
    36 0000002A 59                  <1>     pop     ecx
    37 0000002B 5A                  <1>     pop     edx
    38 0000002C C3                  <1>     ret
    39                              <1> 
    40                              <1> 
    41                              <1> ;----------------  sprintLF  ----------------
    42                              <1> ; Функция печати сообщения с переводом строки
    43                              <1> ; входные данные: mov eax,<message>
    44                              <1> sprintLF:
    45 0000002D E8DDFFFFFF          <1>     call    sprint
    46                              <1> 
    47 00000032 50                  <1>     push    eax
    48 00000033 B80A000000          <1>     mov     eax, 0AH
    49 00000038 50                  <1>     push    eax
    50 00000039 89E0                <1>     mov     eax, esp
    51 0000003B E8CFFFFFFF          <1>     call    sprint
    52 00000040 58                  <1>     pop     eax
    53 00000041 58                  <1>     pop     eax
    54 00000042 C3                  <1>     ret
    55                              <1> 
    56                              <1> ;---------------  sread  ----------------------
    57                              <1> ; Функция считывания сообщения
    58                              <1> ; входные данные: mov eax,<buffer>, mov ebx,<N>
    59                              <1> sread:
    60 00000043 53                  <1>     push    ebx
    61 00000044 50                  <1>     push    eax
    62                              <1>    
    63 00000045 BB00000000          <1>     mov     ebx, 0
    64 0000004A B803000000          <1>     mov     eax, 3
    65 0000004F CD80                <1>     int     80h
    66                              <1> 
    67 00000051 5B                  <1>     pop     ebx
    68 00000052 59                  <1>     pop     ecx
    69 00000053 C3                  <1>     ret
    70                              <1>     
    71                              <1> ;------------- iprint  ---------------------
    72                              <1> ; Функция вывода на экран чисел в формате ASCII
    73                              <1> ; входные данные: mov eax,<int>
    74                              <1> iprint:
    75 00000054 50                  <1>     push    eax             
    76 00000055 51                  <1>     push    ecx             
    77 00000056 52                  <1>     push    edx             
    78 00000057 56                  <1>     push    esi             
    79 00000058 B900000000          <1>     mov     ecx, 0          
    80                              <1>     
    81                              <1> divideLoop:
    82 0000005D 41                  <1>     inc     ecx             
    83 0000005E BA00000000          <1>     mov     edx, 0          
    84 00000063 BE0A000000          <1>     mov     esi, 10  
    85 00000068 F7FE                <1>     idiv    esi    
    86 0000006A 83C230              <1>     add     edx, 48  
    87 0000006D 52                  <1>     push    edx   
    88 0000006E 83F800              <1>     cmp     eax, 0   
    89 00000071 75EA                <1>     jnz     divideLoop  
    90                              <1> 
    91                              <1> printLoop:
    92 00000073 49                  <1>     dec     ecx       
    93 00000074 89E0                <1>     mov     eax, esp  
    94 00000076 E894FFFFFF          <1>     call    sprint   
    95 0000007B 58                  <1>     pop     eax    
    96 0000007C 83F900              <1>     cmp     ecx, 0   
    97 0000007F 75F2                <1>     jnz     printLoop  
    98                              <1> 
    99 00000081 5E                  <1>     pop     esi   
   100 00000082 5A                  <1>     pop     edx    
   101 00000083 59                  <1>     pop     ecx   
   102 00000084 58                  <1>     pop     eax           
   103 00000085 C3                  <1>     ret
   104                              <1> 
   105                              <1> 
   106                              <1> ;--------------- iprintLF   --------------------
   107                              <1> ; Функция вывода на экран чисел в формате ASCII
   108                              <1> ; входные данные: mov eax,<int>
   109                              <1> iprintLF:
   110 00000086 E8C9FFFFFF          <1>     call    iprint          
   111                              <1> 
   112 0000008B 50                  <1>     push    eax             
   113 0000008C B80A000000          <1>     mov     eax, 0Ah        
   114 00000091 50                  <1>     push    eax             
   115 00000092 89E0                <1>     mov     eax, esp       
   116 00000094 E876FFFFFF          <1>     call    sprint          
   117 00000099 58                  <1>     pop     eax             
   118 0000009A 58                  <1>     pop     eax             
   119 0000009B C3                  <1>     ret
   120                              <1> 
   121                              <1> ;----------------- atoi  ---------------------
   122                              <1> ; Функция преобразования ascii-код символа в целое число
   123                              <1> ; входные данные: mov eax,<int>
   124                              <1> atoi:
   125 0000009C 53                  <1>     push    ebx             
   126 0000009D 51                  <1>     push    ecx             
   127 0000009E 52                  <1>     push    edx             
   128 0000009F 56                  <1>     push    esi             
   129 000000A0 89C6                <1>     mov     esi, eax        
   130 000000A2 B800000000          <1>     mov     eax, 0          
   131 000000A7 B900000000          <1>     mov     ecx, 0          
   132                              <1>  
   133                              <1> .multiplyLoop:
   134 000000AC 31DB                <1>     xor     ebx, ebx        
   135 000000AE 8A1C0E              <1>     mov     bl, [esi+ecx]
   136 000000B1 80FB30              <1>     cmp     bl, 48 
   137 000000B4 7C14                <1>     jl      .finished 
   138 000000B6 80FB39              <1>     cmp     bl, 57  
   139 000000B9 7F0F                <1>     jg      .finished 
   140                              <1>  
   141 000000BB 80EB30              <1>     sub     bl, 48 
   142 000000BE 01D8                <1>     add     eax, ebx
   143 000000C0 BB0A000000          <1>     mov     ebx, 10  
   144 000000C5 F7E3                <1>     mul     ebx  
   145 000000C7 41                  <1>     inc     ecx   
   146 000000C8 EBE2                <1>     jmp     .multiplyLoop  
   147                              <1>  
   148                              <1> .finished:
   149 000000CA 83F900              <1>     cmp     ecx, 0  
   150 000000CD 7407                <1>     je      .restore   
   151 000000CF BB0A000000          <1>     mov     ebx, 10  
   152 000000D4 F7F3                <1>     div     ebx     
   153                              <1>  
   154                              <1> .restore:
   155 000000D6 5E                  <1>     pop     esi   
   156 000000D7 5A                  <1>     pop     edx    
   157 000000D8 59                  <1>     pop     ecx  
   158 000000D9 5B                  <1>     pop     ebx 
   159 000000DA C3                  <1>     ret
   160                              <1> 
   161                              <1> 
   162                              <1> ;------------- quit   ---------------------
   163                              <1> ; Функция завершения программы
   164                              <1> quit:
   165 000000DB BB00000000          <1>     mov     ebx, 0      
   166 000000E0 B801000000          <1>     mov     eax, 1      
   167 000000E5 CD80                <1>     int     80h
   168 000000E7 C3                  <1>     ret
     2                                  
     3                                  SECTION .data ; секция инициированных данных
     4 00000000 D092D0B2D0B5D0B4D0-     msg1: DB 'Введите значение переменной х: ',0
     4 00000009 B8D182D0B520D0B7D0-
     4 00000012 BDD0B0D187D0B5D0BD-
     4 0000001B D0B8D0B520D0BFD0B5-
     4 00000024 D180D0B5D0BCD0B5D0-
     4 0000002D BDD0BDD0BED0B920D1-
     4 00000036 853A2000           
     5 0000003A D092D0B2D0B5D0B4D0-     msg2: DB 'Введите значение переменной a: ',0
     5 00000043 B8D182D0B520D0B7D0-
     5 0000004C BDD0B0D187D0B5D0BD-
     5 00000055 D0B8D0B520D0BFD0B5-
     5 0000005E D180D0B5D0BCD0B5D0-
     5 00000067 BDD0BDD0BED0B92061-
     5 00000070 3A2000             
     6 00000073 D0A0D0B5D0B7D183D0-     rem: DB 'Результат: ',0
     6 0000007C BBD18CD182D0B0D182-
     6 00000085 3A2000             
     7                                  
     8                                  SECTION .bss ; секция не инициированных данных
     9                                  
    10 00000000 <res 50h>               x: RESB 80 ; Переменная, чьё значение будем вводить с клавиатуры, выделенный размер - 80 байт
    11 00000050 <res 50h>               a: RESB 80 ; Переменная, чьё значение будем вводить с клавиатуры, выделенный размер - 80 байт
    12                                  SECTION .text ; Код программы
    13                                  GLOBAL _start ; Начало программы
    14                                  _start: ; Точка входа в программу
    15                                  
    16 000000E8 B8[00000000]            mov eax, msg1 ; запись адреса выводимиого сообщения в eax
    17 000000ED E81DFFFFFF              call sprint ; вызов подпрограммы печати сообщения
    18 000000F2 B9[00000000]            mov ecx, x ; запись адреса переменной в ecx
    19 000000F7 BA50000000              mov edx, 80 ; запись длины вводимого значения в edx
    20 000000FC E842FFFFFF              call sread ; вызов подпрограммы ввода сообщения
    21 00000101 B8[00000000]            mov eax,x; вызов подпрограммы преобразования
    22 00000106 E891FFFFFF              call atoi ; ASCII кода в число, eax=x
    23 0000010B A3[00000000]            mov [x],eax
    24 00000110 B8[3A000000]            mov eax, msg2 ; запись адреса выводимиого сообщения в eax
    25 00000115 E8F5FEFFFF              call sprint ; вызов подпрограммы печати сообщения
    26 0000011A B9[50000000]            mov ecx,a ; запись адреса переменной в ecx
    27 0000011F BA55000000              mov edx, 85 ; запись длины вводимого значения в edx
    28 00000124 E81AFFFFFF              call sread ; вызов подпрограммы ввода сообщения
    29 00000129 B8[50000000]            mov eax,a ; вызов подпрограммы преобразования
    30 0000012E E869FFFFFF              call atoi ; ASCII кода в число, eax=x
    31 00000133 A3[50000000]            mov [a],eax
    32                                  ;------------
    33 00000138 3B05[00000000]          cmp eax,[x] ; Сравниваем 'x' и 'a'
    34 0000013E 7213                    jb check_B ; если 'x<a', то переход на метку 'check_B',
    35 00000140 7300                    jae check_A
    36                                  ;------------
    37                                  check_A:
    38 00000142 A1[50000000]            mov eax,[a]
    39 00000147 D1E0                    shl eax,1
    40 00000149 2B05[00000000]          sub eax,[x]; eax =2a - x 
    41 0000014F 89C7                    mov edi,eax ; запись результата вычисления в 'edi'
    42 00000151 EB09                    jmp _end
    43                                  ;------------
    44                                  check_B:
    45 00000153 BB08000000              mov ebx,8 ; 
    46 00000158 89C7                    mov edi,eax ; запись результата вычисления в 'edi'
    47 0000015A EB00                    jmp _end
    48                                  ; ---- Вывод результата на экран
    49                                  _end:
    50 0000015C B8[73000000]            mov eax,rem ; вызов подпрограммы печати
    51 00000161 E8A9FEFFFF              call sprint ; сообщения 'Результат: '
    52 00000166 89F8                    mov eax,edi ; вызов подпрограммы печати значения
    53 00000168 E819FFFFFF              call iprintLF ; из 'edi' в виде символов
    54 0000016D E869FFFFFF              call quit ; вызов подпрограммы завершения
